app.patch("/api/user/:id", (req, res, next) => {
    var data = {
        name: req.body.name,
        email: req.body.email,
        password : req.body.password ? md5(req.body.password) : null
    }
    db.run(
        `UPDATE user set 
           name = COALESCE(?,name), 
           email = COALESCE(?,email), 
           password = COALESCE(?,password) 
           WHERE id = ?`,
        [data.name, data.email, data.password, req.params.id],
        function (err, result) {
            if (err){
                res.status(400).json({"error": res.message})
                return;
            }
            res.json({
                message: "success",
                data: data,
                changes: this.changes
            })
    });
})


We use the PATCH method (app.patch()), an endpoint with a variable expression (:id), mapped to a variable in req.params (req.params.id)
Since each field could be empty (not updated), we use COALESCE function to keep the current value if there is no new value (null). The UPDATE command filter the user ID selected in the request (:id)
After checking if there is any error (err), returns a successful JSON response.
Again, we use a classical callback function to get access to this.changes (the number of rows updated).
You can use this number if you need to verify if the row was modified or not (same original data), to trigger a UI update, for example.