app.post("/api/user/", (req, res, next) => {
    var errors=[]
    if (!req.body.password){
        errors.push("No password specified");
    }
    if (!req.body.email){
        errors.push("No email specified");
    }
    if (errors.length){
        res.status(400).json({"error":errors.join(",")});
        return;
    }
    var data = {
        name: req.body.name,
        email: req.body.email,
        password : md5(req.body.password)
    }
    var sql ='INSERT INTO user (name, email, password) VALUES (?,?,?)'
    var params =[data.name, data.email, data.password]
    db.run(sql, params, function (err, result) {
        if (err){
            res.status(400).json({"error": err.message})
            return;
        }
        res.json({
            "message": "success",
            "data": data,
            "id" : this.lastID
        })
    });
})


We use app.post() to restrict this command only to POST requests.
The req.body now contains a list of data posted from the client.
The raw body of this post request could be something like:
name=test&email=test%40example.com&password=test123
The body-parser will convert this string to a javascript object:
{name:'test', email: 'test@example.com', password: 'test123'}
We check some mandatory fields. If the check fails, we will send a HTTP 400 error (Bad Request), with a list of errors.
We call db.run(sql, params, callback) with the INSERT statement as sql, and the user fields to save as params.
The callback will check if there was any error (err != null).
If everything is OK, we return a JSON response with a message, the data inserted and the new id, automatically created for the user (this.lastID). This ID is useful if you need to retrieve the user after creating.
Note the use of a classic function(err, result) { } notation instead of ES6 arrow function for the callback. This way is to make available the this object, to get the last ID (this.lastID). Otherwise, it cannot be accessed.